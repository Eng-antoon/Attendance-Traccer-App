Now I have a code I want you to help me modifying some issues, so I will give you the full code, and I will need you to help me in it, :
index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attendance Tracker</title>
    
    <!-- External CSS -->
    <link rel="stylesheet" href="styles.css">
    
    <!-- Choices.js CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
    
    <!-- Firebase Configuration -->
    <!-- Firebase App (the core Firebase SDK) -->
    <script src="https://www.gstatic.com/firebasejs/8.6.1/firebase-app.js"></script>
    <!-- Firebase Services -->
    <script src="https://www.gstatic.com/firebasejs/8.6.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.1/firebase-auth.js"></script>
    
    <!-- Firebase Initialization -->
    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyAdRdy9EIlf9cqumCJDKmT-LBo-0buyxfE",
            authDomain: "ragaa2.firebaseapp.com",
            projectId: "ragaa2",
            storageBucket: "ragaa2.appspot.com",
            messagingSenderId: "1043709314283",
            appId: "1:1043709314283:web:bf7e3fc81be7540277eaae",
            measurementId: "G-VPN7L61FZT"
        };
        firebase.initializeApp(firebaseConfig);
    </script>
    
    <!-- XLSX.js for Excel file generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.1/xlsx.full.min.js"></script>
    
    <!-- Choices.js -->
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
</head>
<body>
    <!-- Sign-in Modal -->
    <div id="signInModal" class="modal show" role="dialog" aria-labelledby="signInTitle" aria-modal="true">
        <div class="modal-content gradient-background">
            <h2 id="signInTitle">Sign In</h2>
            <form id="signInForm">
                <label for="signInEmail">Email:</label>
                <input type="email" id="signInEmail" required aria-required="true" aria-describedby="emailHelp">
                <small id="emailHelp">We'll never share your email with anyone else.</small>
                <label for="signInPassword">Password:</label>
                <input type="password" id="signInPassword" required aria-required="true">
                <button type="submit">Sign In</button>
            </form>
        </div>
    </div>

    <!-- Sign-up Modal (accessible only by SuperAdmin) -->
    <div id="signUpModal" class="modal hidden" role="dialog" aria-labelledby="signUpTitle" aria-modal="true">
        <div class="modal-content gradient-background">
            <span class="close" onclick="closeForm('signUpModal')">&times;</span>
            <h2 id="signUpTitle">Create User</h2>
            <form id="signUpForm">
                <label for="signUpEmail">Email:</label>
                <input type="email" id="signUpEmail" required>
                <label for="signUpPassword">Password:</label>
                <input type="password" id="signUpPassword" required>
                <label for="signUpRole">Role:</label>
                <select id="signUpRole" required>
                    <option value="">Select Role</option>
                    <option value="SuperAdmin">SuperAdmin</option>
                    <option value="Full Viewer">Full Viewer</option>
                    <option value="Full Editor">Full Editor</option>
                    <!-- Class-Specific Roles -->
                    <optgroup label="Classes">
                        <option value="motkadem Viewer">motkadem Viewer</option>
                        <option value="motkadem Editor">motkadem Editor</option>
                        <option value="kashaf Viewer">kashaf Viewer</option>
                        <option value="kashaf Editor">kashaf Editor</option>
                        <option value="zahrat Viewer">zahrat Viewer</option>
                        <option value="zahrat Editor">zahrat Editor</option>
                        <option value="gawala Viewer">gawala Viewer</option>
                        <option value="gawala Editor">gawala Editor</option>
                        <option value="bara3em Viewer">bara3em Viewer</option>
                        <option value="bara3em Editor">bara3em Editor</option>
                        <option value="ashbal Viewer">ashbal Viewer</option>
                        <option value="ashbal Editor">ashbal Editor</option>
                        <option value="ra2edat Viewer">ra2edat Viewer</option>
                        <option value="ra2edat Editor">ra2edat Editor</option>
                        <!-- Add more classes as needed -->
                    </optgroup>
                </select>
                <button type="submit">Create User</button>
            </form>
        </div>
    </div>

    <div class="container hidden" id="mainContent">
        <!-- Navigation Bar -->
        <nav class="navbar">
            <div class="navbar-brand">Attendance Tracker</div>
            <div class="navbar-menu" id="navbarMenu">
                <button class="control-button" data-action="addRecordForm">+ Add Record</button>
                <button class="control-button" data-action="addPersonForm">+ Add Person</button>
                <button class="control-button" data-action="bulkAttendanceForm">+ Add Bulk Attendance</button>
                <button class="control-button" data-action="calendar">Monthly View</button>
                <button class="control-button" data-action="table">Table View</button>
                <button class="control-button" data-action="downloadMonthlyData">Download Monthly Data</button>
                <button class="control-button" data-action="statistics">Statistics</button>
                <button class="control-button" data-action="viewPersonForm">View/Edit Person</button>
                <!-- Only visible to SuperAdmin -->
                <button class="control-button" id="addUserButton" onclick="openForm('signUpModal')">+ Create User</button>
                <button class="control-button" id="logoutButton">Logout</button>
            </div>
            <div class="hamburger-menu" id="hamburgerMenu" aria-label="Menu">&#9776;</div>
        </nav>

        <!-- Main Content -->
        <h1>Attendance Tracker</h1>
        <div class="controls">
            <!-- Class Selection -->
            <label for="classSelect">Select Class:</label>
            <select id="classSelect">
                <!-- Options will be populated dynamically -->
            </select>
        </div>
        <div class="filters-container">
            <div class="search-bar">
                <input type="text" id="nameSearch" placeholder="Search by Name">
            </div>
            <div class="filter-dropdown">
                <button class="filter-button" onclick="toggleFilterDropdown()">Filter by</button>
                <div id="filterDropdownContent" class="modal hidden" onclick="closeModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <span class="close" onclick="closeForm('filterDropdownContent')">&times;</span>
                        <h3>Filters</h3>
                        <label for="filterName">Filter by Name: </label>
                        <select id="filterName" multiple></select>
                        <label for="filterDate">Filter by Date: </label>
                        <input type="date" id="filterDate">
                        <button class="submit-button" onclick="applyFilters()">Apply</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Calendar View -->
        <div id="calendarView" class="hidden">
            <div class="calendar-header">
                <button class="calendar-nav-button" id="prevMonthButton" onclick="changeMonth(-1)">&#10094;</button>
                <span id="currentMonthYear" class="calendar-month"></span>
                <button class="calendar-nav-button" id="nextMonthButton" onclick="changeMonth(1)">&#10095;</button>
            </div>
            <div class="calendar" id="calendar"></div>
        </div>

        <!-- Table View -->
        <div id="tableView" class="hidden">
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Class</th>
                            <th>Name</th>
                            <th>Date</th>
                            <th>Attendance</th>
                            <th>Description</th>
                            <th>Edit</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceTable"></tbody>
                </table>
            </div>
        </div>

        <!-- Modals and Forms -->
        <!-- Add Record Form -->
        <div id="addRecordForm" class="modal hidden" role="dialog" aria-labelledby="addRecordTitle" aria-modal="true" onclick="closeModal(event)">
            <div class="modal-content gradient-background" onclick="event.stopPropagation()">
                <span class="close" onclick="closeForm('addRecordForm')">&times;</span>
                <h3 id="addRecordTitle">Add Record</h3>
                <label for="recordClass">اختر الوحده:</label>
                <select id="recordClass" required>
                    <option value="motkadem">motkadem</option>
                    <option value="kashaf">kashaf</option>
                    <option value="zahrat">zahrat</option>
                    <option value="gawala">gawala</option>
                    <option value="bara3em">bara3em</option>
                    <option value="ashbal">ashbal</option>
                    <option value="ra2edat">ra2edat</option>
                    <!-- Class options will be populated dynamically -->
                </select>
                
                
                <label for="recordName">اكتب الاسم:</label>
                <select id="recordName" required aria-required="true" aria-label="اكتب الاسم">
                    <!-- Options will be populated dynamically -->
                </select>
                
                <!-- <select id="recordName" required></select> -->
                <label for="recordDate">Date: </label>
                <input type="date" id="recordDate" required>
                <label for="recordAttendance">Attendance: </label>
                <select id="recordAttendance" onchange="toggleDescription()">
                    <option value="Attended">Attended</option>
                    <option value="Absent">Absent</option>
                    <option value="Excused">Excused</option>
                </select>
                <label for="recordDescription" id="descriptionLabel" class="hidden">Description: </label>
                <input type="text" id="recordDescription" class="hidden">
                <button class="submit-button" onclick="addRecord()">Submit</button>
            </div>
        </div>

        <!-- Add Person Form -->
        <div id="addPersonForm" class="modal hidden" role="dialog" aria-labelledby="addPersonTitle" aria-modal="true" onclick="closeModal(event)">
            <div class="modal-content gradient-background" onclick="event.stopPropagation()">
                <span class="close" onclick="closeForm('addPersonForm')">&times;</span>
                <h3 id="addPersonTitle">Add Person</h3>
                <label for="personUnit">اختر الوحده:</label>
                <select id="personUnit" required>
                    <option value="">Select Unit</option>
                    <option value="motkadem">motkadem</option>
                    <option value="kashaf">kashaf</option>
                    <option value="zahrat">zahrat</option>
                    <option value="gawala">gawala</option>
                    <option value="bara3em">bara3em</option>
                    <option value="ashbal">ashbal</option>
                    <option value="ra2edat">ra2edat</option>
                    <!-- Add more classes as needed -->
                </select>
                <label for="personName">اكتب الاسم:</label>
                <input type="text" id="personName" required>
                <label for="personAddress">العنوان:</label>
                <input type="text" id="personAddress" required>
                <label for="personDOB">تاريخ الميلاد:</label>
                <input type="date" id="personDOB" required>
                <label for="personMobile">الموبيل:</label>
                <input type="text" id="personMobile" required>
                <label for="personPhone">رقم التليفون:</label>
                <input type="text" id="personPhone" required>
                <label for="personEmail">Email:</label>
                <input  type="email" id="personEmail" required>
                <label for="personSchool">المدرسة:</label>
                <input type="text" id="personSchool" required>
                <label for="personAcademicYear">السنة الدراسية (التى ظهرت نتيجتها):</label>
                <input type="text" id="personAcademicYear" required>
                <label for="personFamily">الاسرة:</label>
                <input type="text" id="personFamily" required>
                <label for="personServant">اسم الخادم/الخادمة:</label>
                <input type="text" id="personServant" required>
                <label for="personAffiliation">اب الاعتراف:</label>
                <input type="text" id="personAffiliation" required>
                <label for="personChurch">كنيسة اب الاعتراف:</label>
                <input type="text" id="personChurch" required>
                <label for="personFolar">استلمت الفولار ؟:</label>
                <select id="personFolar" required>
                    <option value="">Select Option</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
                <button class="submit-button" onclick="addPerson()">Submit</button>
            </div>
        </div>

        <!-- Bulk Attendance Form -->
        <div id="bulkAttendanceForm" class="modal hidden" role="dialog" aria-labelledby="bulkAttendanceTitle" aria-modal="true" onclick="closeModal(event)">
            <div class="modal-content gradient-background" onclick="event.stopPropagation()">
                <span class="close" onclick="closeForm('bulkAttendanceForm')">&times;</span>
                <h3 id="bulkAttendanceTitle">Add Bulk Attendance</h3>
                <label for="bulkRecordClass">اختر الوحده:</label>
                <select id="bulkRecordClass" required>
                    <option value="">Select Unit</option>
                    <option value="motkadem">motkadem</option>
                    <option value="kashaf">kashaf</option>
                    <option value="zahrat">zahrat</option>
                    <option value="gawala">gawala</option>
                    <option value="bara3em">bara3em</option>
                    <option value="ashbal">ashbal</option>
                    <option value="ra2edat">ra2edat</option>
                    <!-- Add more classes as needed -->
                </select>
                <label for="bulkRecordNames">اكتب الاسماء:</label>
                <select id="bulkRecordNames" multiple></select>
                <label for="bulkRecordDate">Date: </label>
                <input type="date" id="bulkRecordDate" required>
                <label for="bulkRecordAttendance">Attendance: </label>
                <select id="bulkRecordAttendance" required>
                    <option value="Attended">Attended</option>
                    <option value="Absent">Absent</option>
                    <option value="Excused">Excused</option>
                </select>
                <button class="submit-button" onclick="addBulkAttendance()">Submit</button>
            </div>
        </div>

        <!-- Edit Record Form -->
        <div id="editRecordForm" class="modal hidden" role="dialog" aria-labelledby="editRecordTitle" aria-modal="true" onclick="closeModal(event)">
            <div class="modal-content gradient-background" onclick="event.stopPropagation()">
                <span class="close" onclick="closeForm('editRecordForm')">&times;</span>
                <h3 id="editRecordTitle">Edit Record</h3>
                <label for="editRecordClass">اختر الوحده:</label>
                <select id="editRecordClass" required>
                    <!-- Class options will be populated dynamically -->
                </select>
                <label for="editRecordName">اكتب الاسم:</label>
                <select id="editRecordName" required></select>
                <label for="editRecordDate">Date: </label>
                <input type="date" id="editRecordDate" required>
                <label for="editRecordAttendance">Attendance: </label>
                <select id="editRecordAttendance" onchange="toggleEditDescription()" required>
                    <option value="Attended">Attended</option>
                    <option value="Absent">Absent</option>
                    <option value="Excused">Excused</option>
                </select>
                <label for="editRecordDescription" id="editDescriptionLabel" class="hidden">Description: </label>
                <input type="text" id="editRecordDescription" class="hidden">
                <button class="submit-button" onclick="updateRecord()">Update</button>
            </div>
        </div>

        <!-- View/Edit Person Form -->
        <div id="viewPersonForm" class="modal hidden" role="dialog" aria-labelledby="viewPersonTitle" aria-modal="true" onclick="closeModal(event)">
            <div class="modal-content gradient-background" onclick="event.stopPropagation()">
                <span class="close" onclick="closeForm('viewPersonForm')">&times;</span>
                <h3 id="viewPersonTitle">View/Edit Person</h3>
                <label for="viewPersonUnit">اختر الوحده:</label>
                <select id="viewPersonUnit" required>
                    <option value="">Select Unit</option>
                    <option value="motkadem">motkadem</option>
                    <option value="kashaf">kashaf</option>
                    <option value="zahrat">zahrat</option>
                    <option value="gawala">gawala</option>
                    <option value="bara3em">bara3em</option>
                    <option value="ashbal">ashbal</option>
                    <option value="ra2edat">ra2edat</option>
                    <!-- Add more classes as needed -->
                </select>
                <label for="viewPersonSelect">اكتب الاسم:</label>
                <select id="viewPersonSelect" onchange="loadPersonData()" required></select>
                <div id="personData" class="hidden">
                    <label for="viewPersonAddress">العنوان:</label>
                    <input type="text" id="viewPersonAddress">
                    <label for="viewPersonDOB">تاريخ الميلاد:</label>
                    <input type="date" id="viewPersonDOB">
                    <label for="viewPersonMobile">الموبيل:</label>
                    <input type="text" id="viewPersonMobile">
                    <label for="viewPersonPhone">رقم التليفون:</label>
                    <input type="text" id="viewPersonPhone">
                    <label for="viewPersonEmail">Email:</label>
                    <input type="email" id="viewPersonEmail">
                    <label for="viewPersonSchool">المدرسة:</label>
                    <input type="text" id="viewPersonSchool">
                    <label for="viewPersonAcademicYear">السنة الدراسية (التى ظهرت نتيجتها):</label>
                    <input type="text" id="viewPersonAcademicYear">
                    <label for="viewPersonFamily">الاسرة:</label>
                    <input type="text" id="viewPersonFamily">
                    <label for="viewPersonServant">اسم الخادم/الخادمة:</label>
                    <input type="text" id="viewPersonServant">
                    <label for="viewPersonAffiliation">اب الاعتراف:</label>
                    <input type="text" id="viewPersonAffiliation">
                    <label for="viewPersonChurch">كنيسة اب الاعتراف:</label>
                    <input type="text" id="viewPersonChurch">
                    <label for="viewPersonFolar">استلمت الفولار ؟:</label>
                    <select id="viewPersonFolar">
                        <option value="">Select Option</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                    <button class="submit-button" onclick="editPersonData()">Edit</button>
                </div>
            </div>
        </div>

    </div>

    <!-- Toast Notification -->
    <div id="toast" class="hidden"></div>

    <!-- External JS -->
    <script src="scripts.js"></script>
</body>
</html>


styles.css
/* General Styles */
body, html {
    margin: 0;
    padding: 0;
    font-family: 'Roboto', sans-serif;
    background-color: #f4f6f9;
    color: #333;
}

/* Container */
.container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

/* Hidden Class */
.hidden {
    display: none;
}

/* Modals */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.6);
    align-items: center;
    justify-content: center;
}

.modal.show {
    display: flex;
    animation: fadeIn 0.3s;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.modal-content {
    background-color: #4b3c3c;
    padding: 30px 20px;
    top: 160px;
    border-radius: 10px;
    width: 90%;
    max-width: 500px;
    position: relative;
    animation: slideIn 0.3s;
}

@keyframes slideIn {
    from { transform: translateY(-50px); }
    to { transform: translateY(0); }
}

/* Gradient Background for Modals */
.gradient-background {
    background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
    color: #fff;
}

/* Modal Headers */
.modal-content h2, .modal-content h3 {
    margin-top: 0;
    text-align: center;
}

/* Close Button */
.close {
    color: #fff;
    position: absolute;
    right: 15px;
    top: 10px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close:hover {
    color: #ccc;
}

/* Form Styles */
.modal-content form label {
    display: block;
    margin-top: 15px;
    color: #fff;
    font-weight: bold;
}

.modal-content form input,
.modal-content form select {
    width: 100%;
    padding: 12px 15px;
    border: none;
    border-radius: 5px;
    margin-top: 5px;
    font-size: 1em;
}

.modal-content form button {
    margin-top: 25px;
    width: 100%;
    background-color: #fff;
    color: #333;
    border: none;
    padding: 12px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s;
}

.modal-content form button:hover {
    background-color: #f1f1f1;
}

/* Navbar */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #2575fc;
    color: white;
    padding: 10px 20px;
}

.navbar-brand {
    font-size: 1.8em;
    font-weight: bold;
}

.navbar-menu {
    display: flex;
    gap: 10px;
}

.navbar-menu .control-button {
    background-color: transparent;
    color: white;
    border: none;
    cursor: pointer;
    padding: 10px 15px;
    font-size: 1em;
    transition: background-color 0.3s, color 0.3s;
}

.navbar-menu .control-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 5px;
}

.hamburger-menu {
    display: none;
    font-size: 30px;
    cursor: pointer;
    color: white;
}

/* Controls */
.controls {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
}

.controls label {
    margin-right: 10px;
    font-weight: bold;
}

.controls select {
    padding: 8px 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

/* Main Heading */
h1 {
    text-align: center;
    margin-top: 20px;
    font-size: 2.5em;
    color: #333;
}

/* Filters */
.filters-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
}

.search-bar {
    flex-grow: 1;
    margin-right: 10px;
    margin-bottom: 10px;
}

.search-bar input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1em;
}

.filter-dropdown {
    position: relative;
    margin-bottom: 10px;
}

.filter-button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s;
}

.filter-button:hover {
    background-color: #218838;
}

/* Calendar */
.calendar-header {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

.calendar-nav-button {
    background-color: #17a2b8;
    color: white;
    border: none;
    padding: 8px 12px;
    margin: 0 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s;
}

.calendar-nav-button:hover {
    background-color: #138496;
}

.calendar-month {
    font-size: 1.8em;
    font-weight: bold;
    color: #333;
}

/* Calendar Grid */
.calendar {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 15px;
}

.calendar div {
    background-color: #fff;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    position: relative;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s;
}

.calendar div:hover {
    transform: translateY(-5px);
}

.calendar .day-name {
    font-weight: bold;
    color: #6c757d;
}

.calendar .day-number {
    font-size: 2em;
    font-weight: bold;
    margin: 10px 0;
    color: #333;
}

.calendar .names {
    margin-top: 10px;
    max-height: 80px;
    overflow-y: auto;
    font-size: 0.9em;
}

.calendar .attended {
    background-color: #d4edda;
}

.calendar .not-attended {
    background-color: #f8d7da;
}

.download-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 10px;
    font-size: 0.9em;
    transition: background-color 0.3s;
}

.download-button:hover {
    background-color: #0056b3;
}

/* Table */
.table-container {
    overflow-x: auto;
    margin-top: 20px;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th,
td {
    padding: 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #2575fc;
    color: white;
    position: sticky;
    top: 0;
    z-index: 1;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

tr:hover {
    background-color: #f1f1f1;
}

.edit-button {
    background-color: #ffc107;
    color: #333;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9em;
    transition: background-color 0.3s;
}

.edit-button:hover {
    background-color: #e0a800;
}

#personEmail{
    width: 100%;
    padding: 10px 2px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1em;
}
/* Form Elements */
input[type="text"],
input[type="date"],
select {
    width: 100%;
    padding: 10px 2px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1em;
}

label {
    font-weight: bold;
    margin-top: 10px;
    display: block;
    color: #333;
}

/* Buttons */
.submit-button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
    font-size: 1em;
    width: 100%;
    transition: background-color 0.3s;
}

.submit-button:hover {
    background-color: #218838;
}

/* Responsive Design */
@media (max-width: 768px) {
    .navbar-menu {
        display: none;
        flex-direction: column;
        background-color: #2575fc;
        position: absolute;
        top: 60px;
        right: 0;
        width: 100%;
        z-index: 999;
    }

    .navbar-menu.show {
        display: flex;
    }

    .navbar-menu .control-button {
        width: 100%;
        text-align: left;
        padding: 15px 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .hamburger-menu {
        display: block;
    }

    .controls {
        flex-direction: column;
        align-items: flex-start;
    }

    .filters-container {
        flex-direction: column;
        align-items: flex-start;
    }

    .search-bar {
        margin-bottom: 10px;
        margin-right: 0;
    }
}

/* Animations */
.control-button, .calendar-nav-button, .filter-button, .edit-button, .submit-button, .download-button {
    animation: fadeInUp 0.5s;
}

@keyframes fadeInUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Scrollbar Styling for Calendar Names */
.calendar .names::-webkit-scrollbar {
    width: 6px;
}

.calendar .names::-webkit-scrollbar-thumb {
    background-color: #533b3b;
    border-radius: 3px;
}

/* Tooltip for Names Overflow */
.calendar .names span {
    position: relative;
}

.calendar .names span:hover::after {
    content: attr(title);
    position: absolute;
    left: 0;
    bottom: 100%;
    background-color: #333;
    color: #fff;
    padding: 5px 8px;
    border-radius: 5px;
    white-space: nowrap;
    z-index: 10;
    opacity: 0;
    animation: fadeIn 0.3s forwards;
}

.calendar .names span:hover::after {
    opacity: 1;
}

/* Expand the input's clickable area */
/* Add these styles to styles.css */

.choices__inner {
    background-color: #fff; /* White background */
    color: #333; /* Dark text */
    border: 1px solid #ccc; /* Light border */
    cursor: pointer;
}

#recordName {
    background-color: #fff; /* White background */
    color: #333; /* Dark text */
    border: 1px solid #ccc; /* Light border */
    cursor: pointer;
}

.choices__list--dropdown {
    background-color: #fff; /* White background for dropdown */
    color: #333; /* Dark text for options */
    z-index: 10000;
    position: absolute; /* Correct positioning */
    width: 100%;
}

.choices__list--dropdown .choices__item--selectable {
    background-color: #fff;
    color: #333;
    cursor: pointer;
}

.choices__list--dropdown .choices__item--selectable.is-highlighted {
    background-color: #2575fc; /* Highlight color */
    color: #fff; /* Highlight text color */
}

/* Ensure the dropdown is positioned correctly and visible */

.choices__inner {
    overflow: visible !important; /* Ensure dropdown is not cut off */
}

.choices__list--dropdown {
    position: absolute; /* Absolute positioning for proper dropdown */
    top: 100%; /* Position below the input */
    left: 0;
    width: 100%;
}
.choices__input{

width: 100% !important;
height: 60px;
padding: 0px !important;
}


scripts.js:
// scripts.js

// Initialize Firebase services
const auth = firebase.auth();
const db = firebase.firestore();

// Global Variables
let currentUser = null;
let currentUserRole = '';
let allowedClasses = [];
let canEdit = false;
let isSuperAdmin = false;
let attendanceData = [];
let allPersons = [];
let currentClass = '';
let editRecordId = null;
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
console.log("currentYear", currentYear);
console.log("currentMonth", currentMonth);


// Initialize Choices.js instances
let filterNameChoices;
let bulkRecordNamesChoices;
let recordNameChoices;
let editRecordNameChoices;
let viewPersonChoices;

// DOM Elements
const signInModal = document.getElementById('signInModal');
const signUpModal = document.getElementById('signUpModal');
const mainContent = document.getElementById('mainContent');
const navbarMenu = document.getElementById('navbarMenu');
const hamburgerMenu = document.getElementById('hamburgerMenu');
const classSelect = document.getElementById('classSelect');
const nameSearchInput = document.getElementById('nameSearch');
const attendanceTableBody = document.getElementById('attendanceTable');
const calendarView = document.getElementById('calendarView');
const tableView = document.getElementById('tableView');
const calendar = document.getElementById('calendar');
const currentMonthYear = document.getElementById('currentMonthYear');
const prevMonthButton = document.getElementById('prevMonthButton');
const nextMonthButton = document.getElementById('nextMonthButton');
const addUserButton = document.getElementById('addUserButton');
const logoutButton = document.getElementById('logoutButton');

// Toast Notification Element
const toast = document.createElement('div');
toast.id = 'toast';
toast.className = 'hidden';
document.body.appendChild(toast);

// Authentication State Listener
auth.onAuthStateChanged(user => {
    if (user) {
        currentUser = user;
        initializeApp();
        hideSignInModal();
    } else {
        currentUser = null;
        resetApp();
        showSignInModal();
    }
});

// Show Sign-In Modal
function showSignInModal() {
    signInModal.classList.add('show');
    signInModal.classList.remove('hidden');
    mainContent.classList.add('hidden');
}

// Hide Sign-In Modal
function hideSignInModal() {
    signInModal.classList.remove('show');
    signInModal.classList.add('hidden');
    mainContent.classList.remove('hidden');
}

// Reset App
function resetApp() {
    currentUserRole = '';
    allowedClasses = [];
    canEdit = false;
    isSuperAdmin = false;
    attendanceData = [];
    allPersons = [];
    currentClass = '';
    editRecordId = null;
    currentMonth = new Date().getMonth();
    currentYear = new Date().getFullYear();
    mainContent.classList.add('hidden');

    // Clear Choices.js instances
    destroyChoicesInstances();

    // Hide all modals
    closeForm('signUpModal');
    closeForm('addRecordForm');
    closeForm('addPersonForm');
    closeForm('bulkAttendanceForm');
    closeForm('editRecordForm');
    closeForm('viewPersonForm');

    // Clear attendance table and calendar
    attendanceTableBody.innerHTML = '';
    calendar.innerHTML = '';
}

// Destroy all Choices.js instances
// Destroy all Choices.js instances
function destroyChoicesInstances() {
    if (filterNameChoices) {
        filterNameChoices.destroy();
        filterNameChoices = null;
    }
    if (bulkRecordNamesChoices) {
        bulkRecordNamesChoices.destroy();
        bulkRecordNamesChoices = null;
    }
    if (recordNameChoices) {
        recordNameChoices.destroy();
        recordNameChoices = null;
    }
    if (editRecordNameChoices) {
        editRecordNameChoices.destroy();
        editRecordNameChoices = null;
    }
    if (viewPersonChoices) {
        viewPersonChoices.destroy();
        viewPersonChoices = null;
    }
}


// Handle Sign-In
document.getElementById('signInForm').addEventListener('submit', handleSignIn);

function handleSignIn(event) {
    event.preventDefault();
    const email = document.getElementById('signInEmail').value.trim();
    const password = document.getElementById('signInPassword').value;

    auth.signInWithEmailAndPassword(email, password)
        .then(userCredential => {
            currentUser = userCredential.user;
            initializeApp();
            hideSignInModal();
        })
        .catch(error => {
            showToast(error.message);
        });
}

// Handle Sign-Up (SuperAdmin only)
document.getElementById('signUpForm').addEventListener('submit', handleSignUp);

function handleSignUp(event) {
    event.preventDefault();
    const email = document.getElementById('signUpEmail').value.trim();
    const password = document.getElementById('signUpPassword').value;
    const role = document.getElementById('signUpRole').value;

    // Only SuperAdmin can create new users
    if (!isSuperAdmin) {
        showToast('You do not have permission to create users.');
        return;
    }

    auth.createUserWithEmailAndPassword(email, password)
        .then(userCredential => {
            // Save user role in Firestore
            return db.collection('users').doc(email).set({
                role: role
            });
        })
        .then(() => {
            showToast('User created successfully.');
            closeForm('signUpModal');
            document.getElementById('signUpForm').reset();
        })
        .catch(error => {
            showToast(error.message);
        });
}

// Logout User
logoutButton.addEventListener('click', logout);

function logout() {
    auth.signOut().then(() => {
        currentUser = null;
        resetApp();
        showSignInModal();
    }).catch(error => {
        showToast('Error during logout: ' + error.message);
    });
}

// Initialize App after Authentication
function initializeApp() {
    getUserRole().then(role => {
        currentUserRole = role;
        setupPermissions(role);
        setupUIForRole();
        initializeChoices();
        // loadClasses();
        toggleView('calendar');
        setupEventListeners();
    }).catch(error => {
        showToast('Error initializing app: ' + error.message);
    });
}

// Get User Role from Firestore
function getUserRole() {
    return db.collection('users').doc(currentUser.email).get().then(doc => {
        if (doc.exists) {
            return doc.data().role;
        } else {
            // Default role if not set
            return 'Full Viewer';
        }
    });
}

// Setup Permissions based on Role
function setupPermissions(role) {
    allowedClasses = [];
    canEdit = false;
    isSuperAdmin = false;

    if (role === 'SuperAdmin') {
        isSuperAdmin = true;
        canEdit = true;
        // Fetch all classes dynamically
        db.collection('classes').get().then(snapshot => {
            snapshot.forEach(doc => {
                allowedClasses.push(doc.id);
            });
            populateClassSelect();
        }).catch(error => {
            showToast('Error fetching classes: ' + error.message);
        });
    } else if (role === 'Full Editor') {
        canEdit = true;
        // Fetch all classes dynamically
        db.collection('classes').get().then(snapshot => {
            snapshot.forEach(doc => {
                allowedClasses.push(doc.id);
            });
            populateClassSelect();
        }).catch(error => {
            showToast('Error fetching classes: ' + error.message);
        });
    } else if (role === 'Full Viewer') {
        canEdit = false;
        // Fetch all classes dynamically
        db.collection('classes').get().then(snapshot => {
            snapshot.forEach(doc => {
                allowedClasses.push(doc.id);
            });
            populateClassSelect();
        }).catch(error => {
            showToast('Error fetching classes: ' + error.message);
        });
    } else {
        // Class-specific roles
        const classMatch = role.match(/^(.*) (Viewer|Editor)$/);
        if (classMatch) {
            const className = classMatch[1];
            const roleType = classMatch[2];
            allowedClasses.push(className);
            canEdit = (roleType === 'Editor');
            populateClassSelect();
        } else {
            showToast('Unknown role. Logging out.');
            logout();
        }
    }
}

// Setup UI Elements based on Role
function setupUIForRole() {
    // Show or hide Create User button
    if (isSuperAdmin) {
        addUserButton.style.display = 'inline-block';
    } else {
        addUserButton.style.display = 'none';
    }

    // Show or hide editing controls
    if (!canEdit) {
        document.querySelectorAll('.control-button[data-action="addRecordForm"], .control-button[data-action="addPersonForm"], .control-button[data-action="bulkAttendanceForm"], .control-button[data-action="viewPersonForm"]').forEach(button => {
            button.style.display = 'none';
        });
    } else {
        document.querySelectorAll('.control-button[data-action="addRecordForm"], .control-button[data-action="addPersonForm"], .control-button[data-action="bulkAttendanceForm"], .control-button[data-action="viewPersonForm"]').forEach(button => {
            button.style.display = 'inline-block';
        });
    }

    // Set initial class
    if (allowedClasses.length > 0) {
        currentClass = allowedClasses[0];
        classSelect.value = currentClass;
        loadPersons();
        loadAttendance();
    } else {
        showToast('No classes available.');
    }
}

// Initialize Choices.js
// Initialize Choices.js
function initializeChoices() {
    // Initialize Choices.js for Filter Names if not already initialized
    if (!filterNameChoices) {
        filterNameChoices = new Choices('#filterName', {
            removeItemButton: true,
            searchResultLimit: 5,
            position: 'bottom',
            shouldSort: false,
            itemSelectText: ''
        });
    }

    // Initialize Choices.js for Bulk Record Names if not already initialized
    if (!bulkRecordNamesChoices) {
        bulkRecordNamesChoices = new Choices('#bulkRecordNames', {
            removeItemButton: true,
            searchResultLimit: 5,
            position: 'bottom',
            shouldSort: false,
            itemSelectText: ''
        });
    }

    // Initialize Choices.js for Record Names if not already initialized
    if (!recordNameChoices) {
        recordNameChoices = new Choices('#recordName', {
            searchResultLimit: 5,
            position: 'bottom',
            shouldSort: false,
            itemSelectText: ''
        });
    }

    // Initialize Choices.js for Edit Record Names if not already initialized
    if (!editRecordNameChoices) {
        editRecordNameChoices = new Choices('#editRecordName', {
            searchResultLimit: 5,
            position: 'bottom',
            shouldSort: false,
            itemSelectText: ''
        });
    }

    // Initialize Choices.js for View Person Select if not already initialized
    if (!viewPersonChoices) {
        viewPersonChoices = new Choices('#viewPersonSelect', {
            searchResultLimit: 5,
            position: 'bottom',
            shouldSort: false,
            itemSelectText: ''
        });
    }
}


// Populate Class Select Dropdown
function populateClassSelect() {
    classSelect.innerHTML = '';
    allowedClasses.forEach(cls => {
        const option = document.createElement('option');
        option.value = cls;
        option.textContent = cls;
        classSelect.appendChild(option);
    });

    if (allowedClasses.length > 0) {
        currentClass = allowedClasses[0];
        classSelect.value = currentClass;
        loadPersons();
        loadAttendance();
    }
}

// Load Classes - Already handled in setupPermissions based on role

// Load Persons from Firestore based on currentClass
function loadPersons() {
    allPersons = [];
    db.collection('classes').doc(currentClass).collection('persons').onSnapshot(querySnapshot => {
        allPersons = [];
        querySnapshot.forEach(doc => {
            const data = doc.data();
            allPersons.push({
                id: doc.id,
                name: data.name,
                unit: currentClass
                // Add other fields if needed
            });
        });
        populatePersonSelects();
    }, error => {
        showToast('Error loading persons: ' + error.message);
    });
}

// Populate Person Select Dropdowns
function populatePersonSelects() {
    const personOptions = allPersons.map(person => ({
        value: person.id,
        label: person.name
    }));

    // Populate Filter Name Choices
    if (filterNameChoices) {
        filterNameChoices.clearStore();
        filterNameChoices.setChoices(personOptions, 'value', 'label', true);
    }

    // Populate Bulk Record Names Choices
    if (bulkRecordNamesChoices) {
        bulkRecordNamesChoices.clearStore();
        bulkRecordNamesChoices.setChoices(personOptions, 'value', 'label', true);
    }

    // Populate Record Name Choices
    if (recordNameChoices) {
        recordNameChoices.clearStore();
        recordNameChoices.setChoices(personOptions, 'value', 'label', true);
    }

    // Populate Edit Record Name Choices
    if (editRecordNameChoices) {
        editRecordNameChoices.clearStore();
        editRecordNameChoices.setChoices(personOptions, 'value', 'label', true);
    }

    // Populate View Person Choices
    if (viewPersonChoices) {
        viewPersonChoices.clearStore();
        viewPersonChoices.setChoices(personOptions, 'value', 'label', true);
    }
}

// Load Attendance Data from Firestore based on currentClass
function loadAttendance() {
    attendanceData = [];
    db.collection('classes').doc(currentClass).collection('attendance').onSnapshot(querySnapshot => {
        attendanceData = [];
        querySnapshot.forEach(doc => {
            const data = doc.data();
            attendanceData.push({
                id: doc.id,
                name: data.name,
                date: data.date.toDate().toISOString().split('T')[0],
                attendance: data.attendance,
                description: data.description || ''
            });
        });
        applyFilters();
        generateCalendarView();
    }, error => {
        showToast('Error loading attendance data: ' + error.message);
    });
}

// Setup Event Listeners
function setupEventListeners() {
    // Control Buttons
    document.querySelectorAll('.control-button').forEach(button => {
        button.addEventListener('click', function () {
            const action = this.getAttribute('data-action');
            if (action) {
                handleControlAction(action);
            }
        });
    });

    // Hamburger Menu
    hamburgerMenu.addEventListener('click', toggleHamburgerMenu);

    // Class Selection Change
    if (classSelect) {
        classSelect.addEventListener('change', function () {
            currentClass = this.value;
            loadPersons();
            loadAttendance();
        });
    }

    // Search Input
    nameSearchInput.addEventListener('input', applyFilters);

    // Close Modals on outside click
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function (event) {
            if (event.target === modal) {
                closeForm(modal.id);
            }
        });
    });

    // Previous and Next Month Buttons
    document.addEventListener('DOMContentLoaded', function () {
        // Make sure event listeners are attached only once
        if (!prevMonthButton.getAttribute('data-listener-attached')) {
            prevMonthButton.addEventListener('click', () => changeMonth(-1));
            prevMonthButton.setAttribute('data-listener-attached', true);
        }
    
        if (!nextMonthButton.getAttribute('data-listener-attached')) {
            nextMonthButton.addEventListener('click', () => changeMonth(1));
            nextMonthButton.setAttribute('data-listener-attached', true);
        }
    });
    

    // Add Record Form Submit
    document.getElementById('addRecordForm').addEventListener('submit', function (e) {
        e.preventDefault();
        addRecord();
    });

    // Add Person Form Submit
    document.getElementById('addPersonForm').addEventListener('submit', function (e) {
        e.preventDefault();
        addPerson();
    });

    // Bulk Attendance Form Submit
    document.getElementById('bulkAttendanceForm').addEventListener('submit', function (e) {
        e.preventDefault();
        addBulkAttendance();
    });

    // Edit Record Form Submit
    document.getElementById('editRecordForm').addEventListener('submit', function (e) {
        e.preventDefault();
        updateRecord();
    });

    // View Person Select Change
    document.getElementById('viewPersonSelect').addEventListener('change', loadPersonData);

    // Toggle Filter Dropdown
    document.querySelector('.filter-button').addEventListener('click', toggleFilterDropdown);
}

// Handle Control Actions
function handleControlAction(action) {
    switch (action) {
        case 'addRecordForm':
            openForm('addRecordForm');
            break;
        case 'addPersonForm':
            openForm('addPersonForm');
            break;
        case 'bulkAttendanceForm':
            openForm('bulkAttendanceForm');
            break;
        case 'calendar':
            toggleView('calendar');
            break;
        case 'table':
            toggleView('table');
            break;
        case 'downloadMonthlyData':
            downloadMonthlyData();
            break;
        case 'statistics':
            showToast('Statistics feature is under development.');
            break;
        case 'viewPersonForm':
            openForm('viewPersonForm');
            break;
        default:
            showToast('Unknown action.');
            break;
    }
}

// Toggle Hamburger Menu
function toggleHamburgerMenu() {
    navbarMenu.classList.toggle('show');
}

// Open Form Modal
// Open Form Modal
function openForm(formId) {
    const form = document.getElementById(formId);
    if (form) {
        form.classList.remove('hidden');
        form.classList.add('show');
        // Remove the following lines to prevent re-initialization
        /*
        if (formId === 'addRecordForm' || formId === 'bulkAttendanceForm' || formId === 'editRecordForm') {
            initializeChoices();
        }
        */
    } else {
        showToast(`Form with ID '${formId}' not found.`);
    }
}


// Close Form Modal
function closeForm(formId) {
    const form = document.getElementById(formId);
    if (form) {
        form.classList.add('hidden');
        form.classList.remove('show');
    } else {
        showToast(`Form with ID '${formId}' not found.`);
    }
}

// Toggle View between Calendar and Table
function toggleView(view) {
    if (view === 'calendar') {
        calendarView.classList.remove('hidden');
        tableView.classList.add('hidden');
        generateCalendarView();
    } else if (view === 'table') {
        calendarView.classList.add('hidden');
        tableView.classList.remove('hidden');
        populateAttendanceTable();
    }
}

// Apply Filters
function applyFilters() {
    let filteredData = [...attendanceData];

    // Filter by Name Search
    const nameSearchValue = nameSearchInput.value.toLowerCase();
    if (nameSearchValue) {
        filteredData = filteredData.filter(entry =>
            entry.name.toLowerCase().includes(nameSearchValue)
        );
    }

    // Filter by Selected Names
    const selectedNames = filterNameChoices.getValue(true);
    if (selectedNames.length > 0) {
        filteredData = filteredData.filter(entry =>
            selectedNames.includes(entry.id)
        );
    }

    // Filter by Date
    const filterDate = document.getElementById('filterDate').value;
    if (filterDate) {
        filteredData = filteredData.filter(entry => entry.date === filterDate);
    }

    // Update Views
    populateAttendanceTable(filteredData);
    generateCalendarView(filteredData);
}

// Populate Attendance Table
function populateAttendanceTable(data = attendanceData) {
    attendanceTableBody.innerHTML = '';
    if (data.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `<td colspan="6" style="text-align:center;">No records found.</td>`;
        attendanceTableBody.appendChild(row);
        return;
    }
    data.forEach(entry => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${currentClass}</td>
            <td>${entry.name}</td>
            <td>${entry.date}</td>
            <td>${entry.attendance}</td>
            <td>${entry.description}</td>
            <td>
                ${canEdit ? `<button class="edit-button" onclick="openEditRecordForm('${entry.id}')">Edit</button>` : ''}
            </td>
        `;
        attendanceTableBody.appendChild(row);
    });
}

// Open Edit Record Form
function openEditRecordForm(id) {
    if (!canEdit) {
        showToast('You do not have permission to edit records.');
        return;
    }
    editRecordId = id;
    const record = attendanceData.find(entry => entry.id === id);
    if (record) {
        document.getElementById('editRecordClass').value = currentClass;
        editRecordNameChoices.setChoiceByValue(record.id);
        document.getElementById('editRecordDate').value = record.date;
        document.getElementById('editRecordAttendance').value = record.attendance;
        document.getElementById('editRecordDescription').value = record.description || '';
        toggleEditDescription(); // Show/hide description based on attendance
        openForm('editRecordForm');
    } else {
        showToast('Record not found.');
    }
}

// Update Record
function updateRecord() {
    if (!canEdit) {
        showToast('You do not have permission to update records.');
        return;
    }
    const selectedRecordId = editRecordId;
    if (!selectedRecordId) {
        showToast('No record selected for editing.');
        return;
    }

    const nameId = editRecordNameChoices.getValue(true);
    const person = allPersons.find(p => p.id === nameId);
    if (!person) {
        showToast('Selected person not found.');
        return;
    }

    const dateInput = document.getElementById('editRecordDate').value;
    const date = new Date(dateInput);
    const attendance = document.getElementById('editRecordAttendance').value;
    const description = document.getElementById('editRecordDescription').value.trim();

    const updatedRecord = {
        name: person.name,
        date: firebase.firestore.Timestamp.fromDate(date),
        attendance: attendance,
        description: description
    };

    db.collection('classes').doc(currentClass).collection('attendance').doc(selectedRecordId).update(updatedRecord)
        .then(() => {
            showToast('Record updated successfully.');
            closeForm('editRecordForm');
            editRecordId = null;
        })
        .catch(error => {
            showToast('Error updating record: ' + error.message);
        });
}

// Generate Calendar View
function generateCalendarView(data = attendanceData) {
    calendar.innerHTML = '';
    currentMonthYear.textContent = new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' });

    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

    for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = new Date(currentYear, currentMonth, day).toISOString().split('T')[0];
        const dayData = data.filter(entry => entry.date === dateStr);

        const dayDiv = document.createElement('div');
        dayDiv.classList.add('calendar-day');

        dayDiv.innerHTML = `
            <span class="day-name">${new Date(currentYear, currentMonth, day).toLocaleString('default', { weekday: 'short' })}</span>
            <span class="day-number">${day}</span>
            <div class="names">
                ${dayData.map(entry => `<span title="${entry.name}">${entry.name}</span>`).join('<br>')}
            </div>
        `;

        if (dayData.length > 0) {
            dayDiv.classList.add('attended');
            const downloadButton = document.createElement('button');
            downloadButton.classList.add('download-button');
            downloadButton.textContent = 'Download';
            downloadButton.addEventListener('click', () => downloadDailyAttendance(dateStr));
            dayDiv.appendChild(downloadButton);
        } else {
            dayDiv.classList.add('not-attended');
        }

        calendar.appendChild(dayDiv);
    }

    updateMonthButtons();
}

// Update Month Navigation Buttons
function updateMonthButtons() {
    const prevMonthDate = new Date(currentYear, currentMonth - 1);
    const nextMonthDate = new Date(currentYear, currentMonth + 1);

    prevMonthButton.innerHTML = `&#10094; ${prevMonthDate.toLocaleString('default', { month: 'long' })}`;
    nextMonthButton.innerHTML = `${nextMonthDate.toLocaleString('default', { month: 'long' })} &#10095;`;
}

// Change Month
function changeMonth(delta) {
    currentMonth += delta;
    console.log("currentYear", currentYear);
console.log("currentMonth", currentMonth);
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
        
    } else if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
        
    }
    generateCalendarView();
}

// Add Record
function addRecord() {
    if (!canEdit) {
        showToast('You do not have permission to add records.');
        return;
    }

    const className = document.getElementById('recordClass').value;
    const nameId = recordNameChoices.getValue(true);
    const person = allPersons.find(p => p.id === nameId);
    if (!person) {
        showToast('Selected person not found.');
        return;
    }

    const dateInput = document.getElementById('recordDate').value;
    const date = new Date(dateInput);
    const attendance = document.getElementById('recordAttendance').value;
    const description = document.getElementById('recordDescription').value.trim();

    if (!className) {
        showToast('Please select a class.');
        return;
    }

    const newRecord = {
        name: person.name,
        date: firebase.firestore.Timestamp.fromDate(date),
        attendance: attendance,
        description: description
    };

    db.collection('classes').doc(className).collection('attendance').add(newRecord)
        .then(() => {
            showToast('Record added successfully.');
            closeForm('addRecordForm');
            document.getElementById('addRecordForm').reset();
            toggleDescription(); // Hide description if needed
        })
        .catch(error => {
            showToast('Error adding record: ' + error.message);
        });
}

// Add Person
function addPerson() {
    if (!canEdit) {
        showToast('You do not have permission to add persons.');
        return;
    }

    const unit = document.getElementById('personUnit').value;
    const name = document.getElementById('personName').value.trim();
    const address = document.getElementById('personAddress').value.trim();
    const dob = document.getElementById('personDOB').value;
    const mobile = document.getElementById('personMobile').value.trim();
    const phone = document.getElementById('personPhone').value.trim();
    const email = document.getElementById('personEmail').value.trim();
    const school = document.getElementById('personSchool').value.trim();
    const academicYear = document.getElementById('personAcademicYear').value.trim();
    const family = document.getElementById('personFamily').value.trim();
    const servant = document.getElementById('personServant').value.trim();
    const affiliation = document.getElementById('personAffiliation').value.trim();
    const church = document.getElementById('personChurch').value.trim();
    const folar = document.getElementById('personFolar').value;

    // Basic Validation
    if (!unit || !name || !address || !dob || !mobile || !phone || !email || !school || !academicYear || !family || !servant || !affiliation || !church || !folar) {
        showToast('Please fill in all required fields.');
        return;
    }

    const newPerson = {
        name: name,
        address: address,
        dob: dob,
        mobile: mobile,
        phone: phone,
        email: email,
        school: school,
        academicYear: academicYear,
        family: family,
        servant: servant,
        affiliation: affiliation,
        church: church,
        folar: folar
    };

    db.collection('classes').doc(unit).collection('persons').add(newPerson)
        .then(() => {
            showToast('Person added successfully.');
            closeForm('addPersonForm');
            document.getElementById('addPersonForm').reset();
        })
        .catch(error => {
            showToast('Error adding person: ' + error.message);
        });
}

// Add Bulk Attendance
function addBulkAttendance() {
    if (!canEdit) {
        showToast('You do not have permission to add attendance.');
        return;
    }

    const className = document.getElementById('bulkRecordClass').value;
    const selectedNames = bulkRecordNamesChoices.getValue(true);
    const dateInput = document.getElementById('bulkRecordDate').value;
    const date = new Date(dateInput);
    const attendance = document.getElementById('bulkRecordAttendance').value;

    if (!className || selectedNames.length === 0 || !dateInput || !attendance) {
        showToast('Please fill in all required fields.');
        return;
    }

    const batch = db.batch();
    selectedNames.forEach(personId => {
        const person = allPersons.find(p => p.id === personId);
        if (person) {
            const attendanceRef = db.collection('classes').doc(className).collection('attendance').doc();
            const newRecord = {
                name: person.name,
                date: firebase.firestore.Timestamp.fromDate(date),
                attendance: attendance,
                description: ''
            };
            batch.set(attendanceRef, newRecord);
        }
    });

    batch.commit()
        .then(() => {
            showToast('Bulk attendance added successfully.');
            closeForm('bulkAttendanceForm');
            document.getElementById('bulkAttendanceForm').reset();
        })
        .catch(error => {
            showToast('Error adding bulk attendance: ' + error.message);
        });
}

// Populate Attendance Table with Filtered Data
function populateAttendanceTable(data = attendanceData) {
    attendanceTableBody.innerHTML = '';
    if (data.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `<td colspan="6" style="text-align:center;">No records found.</td>`;
        attendanceTableBody.appendChild(row);
        return;
    }
    data.forEach(entry => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${currentClass}</td>
            <td>${entry.name}</td>
            <td>${entry.date}</td>
            <td>${entry.attendance}</td>
            <td>${entry.description}</td>
            <td>
                ${canEdit ? `<button class="edit-button" onclick="openEditRecordForm('${entry.id}')">Edit</button>` : ''}
            </td>
        `;
        attendanceTableBody.appendChild(row);
    });
}

// Generate Calendar View

// Update Month Navigation Buttons


// Change Month


// Download Monthly Data as Excel
function downloadMonthlyData() {
    const filteredData = attendanceData.filter(entry => {
        const entryDate = new Date(entry.date);
        return entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear;
    });

    if (filteredData.length === 0) {
        showToast('No attendance data available for this month.');
        return;
    }

    const worksheet = XLSX.utils.json_to_sheet(filteredData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Monthly Attendance");
    XLSX.writeFile(workbook, `Attendance_${currentMonth + 1}_${currentYear}.xlsx`);
    showToast('Monthly attendance data downloaded successfully.');
}

// Download Daily Attendance as Excel
function downloadDailyAttendance(dateStr) {
    const filteredData = attendanceData.filter(entry => entry.date === dateStr);

    if (filteredData.length === 0) {
        showToast('No attendance data available for this day.');
        return;
    }

    const worksheet = XLSX.utils.json_to_sheet(filteredData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Daily Attendance");
    XLSX.writeFile(workbook, `Attendance_${dateStr}.xlsx`);
    showToast(`Attendance data for ${dateStr} downloaded successfully.`);
}

// Toggle Description Input based on Attendance Status in Add Record Form
function toggleDescription() {
    const attendance = document.getElementById('recordAttendance').value;
    const descriptionLabel = document.getElementById('descriptionLabel');
    const descriptionInput = document.getElementById('recordDescription');

    if (attendance !== 'Attended') {
        descriptionLabel.classList.remove('hidden');
        descriptionInput.classList.remove('hidden');
    } else {
        descriptionLabel.classList.add('hidden');
        descriptionInput.classList.add('hidden');
    }
}

// Toggle Description Input based on Attendance Status in Edit Record Form
function toggleEditDescription() {
    const attendance = document.getElementById('editRecordAttendance').value;
    const descriptionLabel = document.getElementById('editDescriptionLabel');
    const descriptionInput = document.getElementById('editRecordDescription');

    if (attendance !== 'Attended') {
        descriptionLabel.classList.remove('hidden');
        descriptionInput.classList.remove('hidden');
    } else {
        descriptionLabel.classList.add('hidden');
        descriptionInput.classList.add('hidden');
    }
}

// Show Toast Notification
function showToast(message) {
    toast.textContent = message;
    toast.className = 'show';
    setTimeout(() => {
        toast.className = toast.className.replace('show', '');
    }, 3000);
}

// Toggle Filter Dropdown
function toggleFilterDropdown() {
    const filterDropdownContent = document.getElementById('filterDropdownContent');
    filterDropdownContent.classList.toggle('hidden');
}

// Load Person Data for View/Edit
function loadPersonData() {
    const personId = viewPersonChoices.getValue(true);
    if (!personId) {
        showToast('Please select a person.');
        return;
    }

    db.collection('classes').doc(currentClass).collection('persons').doc(personId).get()
        .then(doc => {
            if (doc.exists) {
                const data = doc.data();
                document.getElementById('viewPersonAddress').value = data.address || '';
                document.getElementById('viewPersonDOB').value = data.dob || '';
                document.getElementById('viewPersonMobile').value = data.mobile || '';
                document.getElementById('viewPersonPhone').value = data.phone || '';
                document.getElementById('viewPersonEmail').value = data.email || '';
                document.getElementById('viewPersonSchool').value = data.school || '';
                document.getElementById('viewPersonAcademicYear').value = data.academicYear || '';
                document.getElementById('viewPersonFamily').value = data.family || '';
                document.getElementById('viewPersonServant').value = data.servant || '';
                document.getElementById('viewPersonAffiliation').value = data.affiliation || '';
                document.getElementById('viewPersonChurch').value = data.church || '';
                document.getElementById('viewPersonFolar').value = data.folar || '';
                document.getElementById('personData').classList.remove('hidden');
            } else {
                showToast('Person not found.');
            }
        })
        .catch(error => {
            showToast('Error loading person data: ' + error.message);
        });
}

// Edit Person Data
function editPersonData() {
    if (!canEdit) {
        showToast('You do not have permission to edit persons.');
        return;
    }

    const personId = viewPersonChoices.getValue(true);
    if (!personId) {
        showToast('Please select a person.');
        return;
    }

    const address = document.getElementById('viewPersonAddress').value.trim();
    const dob = document.getElementById('viewPersonDOB').value;
    const mobile = document.getElementById('viewPersonMobile').value.trim();
    const phone = document.getElementById('viewPersonPhone').value.trim();
    const email = document.getElementById('viewPersonEmail').value.trim();
    const school = document.getElementById('viewPersonSchool').value.trim();
    const academicYear = document.getElementById('viewPersonAcademicYear').value.trim();
    const family = document.getElementById('viewPersonFamily').value.trim();
    const servant = document.getElementById('viewPersonServant').value.trim();
    const affiliation = document.getElementById('viewPersonAffiliation').value.trim();
    const church = document.getElementById('viewPersonChurch').value.trim();
    const folar = document.getElementById('viewPersonFolar').value;

    // Basic Validation
    if (!address || !dob || !mobile || !phone || !email || !school || !academicYear || !family || !servant || !affiliation || !church || !folar) {
        showToast('Please fill in all required fields.');
        return;
    }

    const updatedPerson = {
        address: address,
        dob: dob,
        mobile: mobile,
        phone: phone,
        email: email,
        school: school,
        academicYear: academicYear,
        family: family,
        servant: servant,
        affiliation: affiliation,
        church: church,
        folar: folar
    };

    db.collection('classes').doc(currentClass).collection('persons').doc(personId).update(updatedPerson)
        .then(() => {
            showToast('Person data updated successfully.');
            closeForm('viewPersonForm');
            document.getElementById('viewPersonForm').reset();
        })
        .catch(error => {
            showToast('Error updating person data: ' + error.message);
        });
}

// Download Attendance Data as Excel
function downloadAttendanceData(data, filename) {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Attendance");
    XLSX.writeFile(workbook, filename);
}

// Ensure all Choices.js dropdowns are updated when class changes
classSelect.addEventListener('change', () => {
    initializeChoices();
});

// Wrap initialization code in DOMContentLoaded to ensure elements are loaded
document.addEventListener('DOMContentLoaded', function () {
    initializeChoices();
    setupEventListeners();
});


Now I have some issues: 
1- The dropdown is working for the bulkRecordNamesChoices, but for the other dynamic dropdowns it is not working, such as for the recordNameChoices, so I want you to identify the issue and help me fix it and I think it is because of the single choice and the multiple choice handling in my code.
2- When I click on the button Filter By, it don't take any action as it don't change the class="modal hidden" to class="modal show" so it don't take any action.
3- The button apply related to the filter by is not filtering anything, so I cannot take any action related to the filtering. 
4- Now When I enter a person details I'm expecting that there is a validation on the mobile phone number and email to not be duplicated in the database, but it is now accepting duplicates so please I want duplication limitation added to this code.
5- When I'm trying to add a bulk attendance but the issue is that it should be related to the unit I choose, so for example When I choose the unit as Gawala, so I expect the names in the dropdown will be only the names of the persons in Gawala.
6- When Trying to add attendance using bulk attendance or add record, so the date is not correct for example if I chose the date as 09/23/2024 and set some names in it, so the date is displayed in the calendar view as 09/24/2024 but in the database it is saved as (September 23, 2024 at 3:00:00 AM UTC+3)
So please fix those issues 